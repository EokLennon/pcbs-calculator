{"version":3,"sources":["constants.jsx","screens/ScoresScreen.jsx","screens/BuildMakerScreen.jsx","screens/BuildUpgraderScreen.jsx","screens/PartFixerScreen.jsx","screens/HistoryScreen.jsx","components/SiderWithRouter/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ROUTES","ScoresScreen","children","className","Sider","Layout","SiderWithRouter","useState","collapsed","setCollapsed","location","useLocation","collapsible","onCollapse","theme","mode","selectedKeys","pathname","Item","key","icon","RadarChartOutlined","to","DesktopOutlined","DashboardOutlined","SettingOutlined","HistoryOutlined","Content","Footer","App","exact","path","component","BuildMakerScreen","BuildUpgraderScreen","PartFixerScreen","HistoryScreen","from","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMACaA,G,MAEH,WAFGA,EAIJ,SAJIA,EAMD,YANCA,EAQJ,SARIA,EAUF,WCDIC,EARM,SAAC,GAAiB,EAAfC,SACtB,OACE,yBAAKC,UAAU,wBAAf,mBCMWF,EARM,SAAC,GAAiB,EAAfC,SACtB,OACE,yBAAKC,UAAU,6BAAf,yBCMWF,EARM,SAAC,GAAiB,EAAfC,SACtB,OACE,yBAAKC,UAAU,gCAAf,4BCMWF,EARM,SAAC,GAAiB,EAAfC,SACtB,OACE,yBAAKC,UAAU,4BAAf,wBCMWF,EARM,SAAC,GAAiB,EAAfC,SACtB,OACE,yBAAKC,UAAU,yBAAf,qB,8DCWIC,G,MAAUC,IAAVD,OA4BOE,EA1BS,WAAO,IAAD,EACMC,oBAAS,GADf,mBACrBC,EADqB,KACVC,EADU,KAEtBC,EAAWC,cACjB,OACE,kBAACP,EAAD,CAAOQ,aAAW,EAACJ,UAAWA,EAAWK,WAAY,kBAAMJ,GAAcD,KACvE,kBAAC,IAAD,CAAMM,MAAM,OAAOC,KAAK,SAASC,aAAc,CAACN,EAASO,WACvD,kBAAC,IAAKC,KAAN,CAAWC,IAAKnB,EAAeoB,KAAM,kBAACC,EAAA,EAAD,OACnC,kBAAC,IAAD,CAAMC,GAAItB,GAAV,mBAEF,kBAAC,IAAKkB,KAAN,CAAWC,IAAKnB,EAAcoB,KAAM,kBAACG,EAAA,EAAD,OAClC,kBAAC,IAAD,CAAMD,GAAItB,GAAV,gBAEF,kBAAC,IAAKkB,KAAN,CAAWC,IAAKnB,EAAiBoB,KAAM,kBAACI,EAAA,EAAD,OACrC,kBAAC,IAAD,CAAMF,GAAItB,GAAV,mBAEF,kBAAC,IAAKkB,KAAN,CAAWC,IAAKnB,EAAcoB,KAAM,kBAACK,EAAA,EAAD,OAClC,kBAAC,IAAD,CAAMH,GAAItB,GAAV,eAEF,kBAAC,IAAKkB,KAAN,CAAWC,IAAKnB,EAAgBoB,KAAM,kBAACM,EAAA,EAAD,OACpC,kBAAC,IAAD,CAAMJ,GAAItB,GAAV,uBCVF2B,EAAoBtB,IAApBsB,QAASC,EAAWvB,IAAXuB,OA0BFC,EAvBH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ1B,UAAU,QAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQA,UAAU,eAChB,kBAACwB,EAAD,CAASxB,UAAU,gBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAM/B,EAAiBgC,UAAW/B,IAC/C,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAM/B,EAAiBgC,UAAWC,IAC/C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAM/B,EAAiBgC,UAAWE,IAC/C,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAM/B,EAAiBgC,UAAWG,IAC/C,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAM/B,EAAiBgC,UAAWI,IAC/C,kBAAC,IAAD,CAAUC,KAAK,IAAIf,GAAItB,MAG3B,kBAAC4B,EAAD,CAAQzB,UAAU,eAAlB,qCChCYmC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a8805d83.chunk.js","sourcesContent":["/** Root Object that contains all routes constants */\r\nexport const ROUTES = {\r\n  /** Route Path for 3D Mark Score Calculator page */\r\n  SCORES: \"/scores\",\r\n  /** Route Path for * page */\r\n  MAKER: \"/maker\",\r\n  /** Route Path for * page */\r\n  UPGRADER: \"/upgrader\",\r\n  /** Route Path for * page */\r\n  FIXER: \"/fixer\",\r\n  /** Route Path for * page */\r\n  HISTORY: \"/history\"\r\n}","import React from \"react\";\r\n\r\nconst ScoresScreen = ({ children }) => {\r\n  return (\r\n    <div className=\"screen scores-screen\">\r\n      I'm a score :D\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoresScreen","import React from \"react\";\r\n\r\nconst ScoresScreen = ({ children }) => {\r\n  return (\r\n    <div className=\"screen build-maker-screen\">\r\n      I'm a Build Maker :D\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoresScreen","import React from \"react\";\r\n\r\nconst ScoresScreen = ({ children }) => {\r\n  return (\r\n    <div className=\"screen build-upgrader-screen\">\r\n      I'm a Build Upgrader :D\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoresScreen","import React from \"react\";\r\n\r\nconst ScoresScreen = ({ children }) => {\r\n  return (\r\n    <div className=\"screen part-fixer-screen\">\r\n      I'm a Part Fixer :D\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoresScreen","import React from \"react\";\r\n\r\nconst ScoresScreen = ({ children }) => {\r\n  return (\r\n    <div className=\"screen history-screen\">\r\n      I'm a History :D\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoresScreen","import React, { useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  RadarChartOutlined,\r\n  DesktopOutlined,\r\n  DashboardOutlined,\r\n  SettingOutlined,\r\n  HistoryOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport { ROUTES } from '../../constants';\r\n\r\nimport './style.scss';\r\n\r\nconst { Sider } = Layout;\r\n\r\nconst SiderWithRouter = () => {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const location = useLocation();\r\n  return (\r\n    <Sider collapsible collapsed={collapsed} onCollapse={() => setCollapsed(!collapsed)}>\r\n      <Menu theme=\"dark\" mode=\"inline\" selectedKeys={[location.pathname]}>\r\n        <Menu.Item key={ROUTES.SCORES} icon={<RadarChartOutlined />}>\r\n          <Link to={ROUTES.SCORES}>3D Mark Scores</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key={ROUTES.MAKER} icon={<DesktopOutlined />}>\r\n          <Link to={ROUTES.MAKER}>Build Maker</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key={ROUTES.UPGRADER} icon={<DashboardOutlined />}>\r\n          <Link to={ROUTES.UPGRADER}>Build Upgrader</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key={ROUTES.FIXER} icon={<SettingOutlined />}>\r\n          <Link to={ROUTES.FIXER}>Part Fixer</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key={ROUTES.HISTORY} icon={<HistoryOutlined />}>\r\n          <Link to={ROUTES.HISTORY}>History & Saves</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n}\r\n\r\nexport default SiderWithRouter;\r\n","// #region Main Imports\nimport React from 'react';\nimport { Layout } from 'antd';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\n// #endregion\n\n// #region Styles\nimport './theme/style.scss';\n// #endregion\n\n// #region Screens\nimport { ROUTES } from './constants';\nimport ScoresScreen from './screens/ScoresScreen';\nimport BuildMakerScreen from './screens/BuildMakerScreen';\nimport BuildUpgraderScreen from './screens/BuildUpgraderScreen';\nimport PartFixerScreen from './screens/PartFixerScreen';\nimport HistoryScreen from './screens/HistoryScreen';\n// #endregion\n\n// #region Components\nimport SiderWithRouter from './components/SiderWithRouter';\nconst { Content, Footer } = Layout;\n// #endregion \n\nconst App = () => (\n  <Router>\n    <Layout className=\"main\">\n      <SiderWithRouter />\n      <Layout className=\"site-layout\">\n        <Content className=\"site-content\">\n          <Switch>\n            <Route exact path={ROUTES.SCORES}   component={ScoresScreen} />\n            <Route exact path={ROUTES.MAKER}    component={BuildMakerScreen} />\n            <Route exact path={ROUTES.UPGRADER} component={BuildUpgraderScreen} />\n            <Route exact path={ROUTES.FIXER}    component={PartFixerScreen} />\n            <Route exact path={ROUTES.HISTORY}  component={HistoryScreen} />\n            <Redirect from=\"/\" to={ROUTES.SCORES} />\n          </Switch>\n        </Content>\n        <Footer className=\"site-footer\">\n          &copy;2020 Created by EokLennon\n        </Footer>\n      </Layout>\n    </Layout>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}